// OpenScenario2 grammar in Lark format

// Terminal definitions
?INDENT: "\t"  // These will be handled by Lark's indentation feature
?DEDENT: "\t"  // These will be handled by Lark's indentation feature

// Common tokens
NEWLINE: /\r?\n\s*/
OPEN_BRACKET: "["
CLOSE_BRACKET: "]"
WS: /[ \t]+/
COMMENT: /#[^\r\n]*/

// String literals
STRING_LITERAL: SHORTSTRING | LONGSTRING
SHORTSTRING: /"([^\\"\r\n]|\\.)*"/ | /'([^\\'\r\n]|\\.)*'/
LONGSTRING: /"""([^\\"]|\\.)*"""/ | /'''([^\\']|\\.)*'''/

// Bool literals
BOOL_LITERAL: "true" | "false"

// Number literals
INTEGER_LITERAL: UINT_LITERAL | HEX_UINT_LITERAL | INT_LITERAL
UINT_LITERAL: /\d+/
HEX_UINT_LITERAL: /0x[0-9a-fA-F]+/
INT_LITERAL: /-\d+/
FLOAT_LITERAL: /[+-]?(\d*\.\d+([eE][+-]?\d+)?|\d+[eE][+-]?\d+|inf|nan)/

// Identifier
IDENTIFIER: /[A-Za-z][A-Za-z0-9_]*/ | /\|[^|]+\|/

// Physical literal
PHYSICAL_LITERAL: /(("+"|-)?(\d*\.\d+([eE][+-]?\d+)?|\d+[eE][+-]?\d+|inf|nan)|\d+|-\d+)(\w+::\w+|\w+)/

// Main grammar rules
%import common.WS -> _WS
%ignore _WS
%ignore COMMENT

// Enable indentation handling
%declare _INDENT _DEDENT
%ignore /[\t \f]+/  // Whitespace
%ignore /\\[\t \f]*\r?\n/  // Line continuation

// Start rule
start: osc_file

osc_file: prelude_statement* main_statement* 

prelude_statement: import_statement

import_statement: "import" import_reference NEWLINE
import_reference: string_literal | structured_identifier

structured_identifier: (identifier ".")* identifier

main_statement: namespace_statement | export_statement | osc_declaration

namespace_statement: "namespace" namespace_name ("use" namespace_list)? NEWLINE

namespace_list: namespace_name ("," namespace_name)*
namespace_name: identifier | global_namespace_name
global_namespace_name: "null"

export_statement: "export" export_specification ("," export_specification)* NEWLINE
export_specification: qualified_identifier | export_wildcard_specification
export_wildcard_specification: (namespace_name? "::")? "*"

osc_declaration: physical_type_declaration
              | units_declaration
              | enum_declaration
              | struct_declaration
              | actor_declaration
              | action_declaration
              | scenario_declaration
              | modifier_declaration
              | type_extension
              | global_parameter_declaration

type_declarator: non_aggregate_type_declarator | aggregate_type_declarator

non_aggregate_type_declarator: primitive_type | declared_type_name
declared_type_name: qualified_identifier

aggregate_type_declarator: list_type_declarator
list_type_declarator: "list" "of" non_aggregate_type_declarator

primitive_type: "int" | "uint" | "float" | "bool" | "string"

physical_type_declaration: "type" declared_type_name "is" base_unit_specifier NEWLINE

units_declaration: "unit" unit_name "of" declared_type_name "is" unit_specifier NEWLINE

base_unit_specifier: si_base_unit_specifier
unit_specifier: si_unit_specifier

si_base_unit_specifier: "SI" "(" si_base_exponent_list ")"
si_base_exponent_list: si_base_exponent ("," si_base_exponent)*
si_base_exponent: si_base_unit_name ":" integer_literal

si_unit_specifier: "SI" "(" si_base_exponent_list ("," si_factor)? ("," si_offset)? ")"
si_factor: "factor" ":" (float_literal | integer_literal)
si_offset: "offset" ":" (float_literal | integer_literal)
si_base_unit_name: "kg" | "m" | "s" | "A" | "K" | "mol" | "cd" | "rad"

enum_declaration: "enum" enum_name ":" OPEN_BRACKET enum_member_decl ("," enum_member_decl)* CLOSE_BRACKET NEWLINE
enum_member_decl: enum_member_name ("=" enum_member_value)?
enum_name: qualified_identifier
enum_member_name: qualified_identifier
enum_member_value: uint_literal | hex_uint_literal

enum_value_reference: (enum_name "!")? enum_member_name

struct_declaration: "struct" struct_name ("inherits" struct_name ("(" field_name "==" (enum_value_reference | bool_literal) ")")?)? ((":" _INDENT struct_member_decl+ _DEDENT) | NEWLINE)

struct_member_decl: event_declaration | field_declaration | constraint_declaration | method_declaration | coverage_declaration
struct_name: qualified_identifier
field_name: qualified_identifier

actor_declaration: "actor" actor_name ("inherits" actor_name ("(" field_name "==" (enum_value_reference | bool_literal) ")")?)? ((":" _INDENT actor_member_decl+ _DEDENT) | NEWLINE)

actor_member_decl: event_declaration | field_declaration | constraint_declaration | method_declaration | coverage_declaration
actor_name: qualified_identifier

scenario_declaration: "scenario" qualified_behavior_name ("inherits" qualified_behavior_name ("(" field_name "==" (enum_value_reference | bool_literal) ")")?)? ((":" _INDENT (scenario_member_decl | behavior_specification)+ _DEDENT) | NEWLINE)

scenario_member_decl: event_declaration | field_declaration | constraint_declaration | method_declaration | coverage_declaration | modifier_application

qualified_behavior_name: (actor_name ".")? behavior_name
behavior_name: qualified_identifier

action_declaration: "action" qualified_behavior_name ("inherits" qualified_behavior_name ("(" field_name "==" (enum_value_reference | bool_literal) ")")?)? ((":" _INDENT (scenario_member_decl | behavior_specification)+ _DEDENT) | NEWLINE)

modifier_declaration: "modifier" (actor_name ".")? modifier_name ("of" qualified_behavior_name)? ((":" _INDENT (scenario_member_decl | on_directive)+ _DEDENT) | NEWLINE)

modifier_name: qualified_identifier

global_parameter_declaration: "global" parameter_declaration

type_extension: enum_type_extension | structured_type_extension

enum_type_extension: "extend" enum_name ":" OPEN_BRACKET enum_member_decl ("," enum_member_decl)* CLOSE_BRACKET NEWLINE

structured_type_extension: "extend" extendable_type_name ":" _INDENT extension_member_decl+ _DEDENT

extendable_type_name: struct_name | actor_name | qualified_behavior_name
extension_member_decl: struct_member_decl | actor_member_decl | scenario_member_decl | behavior_specification

event_declaration: "event" event_name ("(" argument_list_specification ")")? ("is" event_specification)? NEWLINE
event_specification: event_reference ((event_field_decl)? "if" event_condition)? | event_condition

event_reference: "@" event_path
event_field_decl: "as" event_field_name
event_field_name: qualified_identifier
event_name: qualified_identifier
event_path: (expression ".")? event_name

event_condition: bool_expression | rise_expression | fall_expression | elapsed_expression | every_expression
rise_expression: "rise" "(" bool_expression ")"
fall_expression: "fall" "(" bool_expression ")"
elapsed_expression: "elapsed" "(" duration_expression ")"
every_expression: "every" "(" duration_expression ("," "offset" ":" duration_expression)? ")"

bool_expression: expression
duration_expression: expression

field_declaration: parameter_declaration | variable_declaration
parameter_declaration: field_name ("," field_name)* ":" type_declarator ("=" default_value)? (parameter_with_declaration | NEWLINE)
variable_declaration: "var" field_name ("," field_name)* ":" type_declarator ("=" (default_value | sample_expression))? NEWLINE

sample_expression: "sample" "(" expression "," event_specification ("," default_value)? ")"
default_value: expression

parameter_with_declaration: "with" ":" _INDENT parameter_with_member+ _DEDENT
parameter_with_member: constraint_declaration

constraint_declaration: keep_constraint_declaration | remove_default_declaration

keep_constraint_declaration: "keep" "(" (constraint_qualifier)? constraint_expression ")" NEWLINE
constraint_qualifier: "default" | "hard"

constraint_expression: expression

remove_default_declaration: "remove_default" "(" parameter_reference ")" NEWLINE

parameter_reference: field_name | field_access

method_declaration: "def" method_name "(" (argument_list_specification)? ")" ("->" return_type)? method_implementation NEWLINE

return_type: type_declarator

method_implementation: "is" (method_qualifier)? ("expression" expression | "undefined" | "external" structured_identifier "(" (argument_list)? ")")

method_qualifier: "only"
method_name: qualified_identifier

coverage_declaration: ("cover" | "record") "(" argument_list ")" NEWLINE

modifier_application: (actor_expression ".")? modifier_name "(" (argument_list)? ")" NEWLINE

behavior_specification: on_directive | do_directive

on_directive: "on" event_specification ":" _INDENT on_member+ _DEDENT

on_member: call_directive | emit_directive

do_directive: "do" do_member

do_member: (label_name ":")? (composition | behavior_invocation | wait_directive | emit_directive | call_directive)

label_name: qualified_identifier

composition: composition_operator ("(" unqualified_argument_list? ")")? ":" _INDENT do_member+ _DEDENT (behavior_with_declaration)?

composition_operator: "serial" | "one_of" | "parallel"

behavior_invocation: (actor_expression ".")? behavior_name "(" (argument_list)? ")" (behavior_with_declaration | NEWLINE)

behavior_with_declaration: "with" ":" _INDENT behavior_with_member+ _DEDENT
behavior_with_member: constraint_declaration | modifier_application | until_directive

actor_expression: expression

wait_directive: "wait" event_specification NEWLINE

emit_directive: "emit" event_name ("(" argument_list ")")? NEWLINE

call_directive: "call" method_invocation NEWLINE

method_invocation: postfix_exp "(" (argument_list)? ")"

until_directive: "until" event_specification NEWLINE

argument_list_specification: argument_specification ("," argument_specification)*

argument_specification: argument_name ":" type_declarator ("=" default_value)?

argument_name: qualified_identifier

argument_list: positional_argument ("," positional_argument)* ("," named_argument)*
             | named_argument ("," named_argument)*

positional_argument: expression
named_argument: argument_name ":" expression

unqualified_argument_list: positional_argument ("," positional_argument)* ("," unqualified_named_argument)*
                         | unqualified_named_argument ("," unqualified_named_argument)*

unqualified_argument_name: identifier
unqualified_named_argument: unqualified_argument_name ":" expression

// Expression grammar rules
expression: implication | ternary_op_exp

ternary_op_exp: implication "?" expression ":" expression

implication: disjunction ("=>" disjunction)*
disjunction: conjunction ("or" conjunction)*
conjunction: inversion ("and" inversion)*
inversion: "not" inversion | relation

relation: sum_exp | relation relational_op sum_exp
relational_op: "==" | "!=" | "<" | "<=" | ">" | ">=" | "in"

sum_exp: term | sum_exp additive_op term
additive_op: "+" | "-"

term: factor | term multiplicative_op factor
multiplicative_op: "*" | "/" | "%"

factor: postfix_exp | "-" factor

postfix_exp: primary_exp
          | postfix_exp "." "as" "(" type_declarator ")"  -> cast_exp
          | postfix_exp "." "is" "(" type_declarator ")"  -> type_test_exp
          | postfix_exp OPEN_BRACKET expression CLOSE_BRACKET  -> element_access
          | postfix_exp "(" (argument_list)? ")"  -> function_application
          | postfix_exp "." field_name  -> field_access

field_access: postfix_exp "." field_name

primary_exp: value_exp | "it" | qualified_identifier | "(" expression ")"

value_exp: integer_literal
         | float_literal
         | physical_literal
         | bool_literal
         | string_literal
         | enum_value_reference
         | list_constructor
         | range_constructor

list_constructor: OPEN_BRACKET expression ("," expression)* CLOSE_BRACKET
range_constructor: "range" "(" expression "," expression ")" | OPEN_BRACKET expression ".." expression CLOSE_BRACKET

// Terminals to actual rule references
string_literal: STRING_LITERAL
bool_literal: BOOL_LITERAL
integer_literal: INTEGER_LITERAL
uint_literal: UINT_LITERAL
hex_uint_literal: HEX_UINT_LITERAL
float_literal: FLOAT_LITERAL
identifier: IDENTIFIER
             | "import" | "namespace" | "use" | "null" | "export"
             | "type" | "unit" | si_base_unit_name | "factor" | "offset"
             | "enum" | "struct" | "actor" | "scenario" | "action"
             | "modifier" | "extend" | "inherits" | "global" | "event"
             | "def" | "undefined" | "expression" | "external"
qualified_identifier: identifier | prefixed_identifier
prefixed_identifier: namespace_name? "::" identifier
physical_literal: PHYSICAL_LITERAL
unit_name: (IDENTIFIER "::")? (IDENTIFIER | si_base_unit_name)
